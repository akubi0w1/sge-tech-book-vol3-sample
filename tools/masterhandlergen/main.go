package main

import (
	"os"
	"path/filepath"
	"strings"
	"text/template"

	"github.com/akubi0w1/sge-tech-book-vol3-sample/internal/log"
	"github.com/akubi0w1/sge-tech-book-vol3-sample/internal/terror"
	"github.com/akubi0w1/sge-tech-book-vol3-sample/tools/masterhandlergen/spec"
	"github.com/iancoleman/strcase"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/types/descriptorpb"
)

const (
	headerComment  = "Code generated by masterhandlergen. DO NOT EDIT."
	descriptorPath = "tools/masterhandlergen/tmp/protodesc.json"

	masterHandlerTemplatePath = "tools/masterhandlergen/template/master_handler.tpl"
	masterHandlerOutFilePath  = "internal/handler/master/handler.gen.go"

	converterTemplatePath = "tools/masterhandlergen/template/converter.tpl"
	converterOutFilePath  = "internal/handler/master/converter.gen.go"
)

func main() {
	desc, err := parseProtoFileDescriptor(descriptorPath)
	if err != nil {
		log.Errorf("failed to parse proto file: %v", err)
		os.Exit(1)
	}

	masterHandlerSpec := spec.GenerateMasterHandlerSpec(desc)

	// master handler
	err = executeTemplate(
		masterHandlerTemplatePath, masterHandlerOutFilePath, masterHandlerSpec,
		map[string]interface{}{
			"headerComment": func() string {
				return headerComment
			},
			"lowerCamel": func(s string) string {
				return strcase.ToLowerCamel(strcase.ToSnake(s))
			},
			"lower": func(s string) string {
				return strings.ToLower(s)
			},
		},
	)
	if err != nil {
		log.Errorf("failed to execute template: %v", err)
		os.Exit(1)
	}

	// converter
	err = executeTemplate(
		converterTemplatePath, converterOutFilePath, masterHandlerSpec,
		map[string]interface{}{
			"headerComment": func() string {
				return headerComment
			},
			"goFieldName": func(s string) string {
				name := s
				name = strings.ReplaceAll(name, "Id", "ID")

				return name
			},
		},
	)
	if err != nil {
		log.Errorf("failed to execute template: %v", err)
		os.Exit(1)
	}

	log.Infof("finish generate master handler.")
}

// executeTemplate テンプレートを使ってファイルに書き込みを行う
func executeTemplate(
	templatePath, outFile string,
	spec interface{},
	funcMap map[string]interface{},
) error {
	if err := os.MkdirAll(filepath.Dir(outFile), 0700); err != nil {
		return terror.Wrapf(terror.CodeInternal, err, "failed to mkdir. dir=%s", filepath.Dir(outFile))
	}

	f, err := os.Create(outFile)
	if err != nil {
		return terror.Wrapf(terror.CodeInternal, err, "failed to open file. filename=%s", outFile)
	}
	defer f.Close()

	tpl, err := template.New(filepath.Base(templatePath)).Funcs(funcMap).ParseFiles(templatePath)
	if err != nil {
		return terror.Wrapf(terror.CodeInternal, err, "failed to new template. templatePath=%s", templatePath)
	}

	err = tpl.Execute(f, spec)
	if err != nil {
		return terror.Wrapf(terror.CodeInternal, err, "failed to execute template. templateName=%s", tpl.Name())
	}

	return nil
}

// parseProtoFileDescriptor
func parseProtoFileDescriptor(descriptorFilePath string) (*descriptorpb.FileDescriptorSet, error) {
	f, err := os.ReadFile(descriptorFilePath)
	if err != nil {
		return nil, terror.Wrapf(terror.CodeInternal, err, "failed to open descriptor file. descriptorFilePath=%s", descriptorFilePath)
	}

	pbSet := new(descriptorpb.FileDescriptorSet)
	err = protojson.UnmarshalOptions{DiscardUnknown: true}.Unmarshal(f, pbSet)
	if err != nil {
		return nil, terror.Wrapf(terror.CodeInternal, err, "failed to unmarshal descriptor file. descriptorFilePath=%s", descriptorFilePath)
	}

	return pbSet, nil
}
