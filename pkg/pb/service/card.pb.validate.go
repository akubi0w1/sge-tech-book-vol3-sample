// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: service/card.proto

package service

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _card_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on DrawCardRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DrawCardRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DrawCardRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DrawCardRequestMultiError, or nil if none found.
func (m *DrawCardRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DrawCardRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = DrawCardRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DrawCardRequestMultiError(errors)
	}

	return nil
}

func (m *DrawCardRequest) _validateUuid(uuid string) error {
	if matched := _card_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DrawCardRequestMultiError is an error wrapping multiple validation errors
// returned by DrawCardRequest.ValidateAll() if the designated constraints
// aren't met.
type DrawCardRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DrawCardRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DrawCardRequestMultiError) AllErrors() []error { return m }

// DrawCardRequestValidationError is the validation error returned by
// DrawCardRequest.Validate if the designated constraints aren't met.
type DrawCardRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DrawCardRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DrawCardRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DrawCardRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DrawCardRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DrawCardRequestValidationError) ErrorName() string { return "DrawCardRequestValidationError" }

// Error satisfies the builtin error interface
func (e DrawCardRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDrawCardRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DrawCardRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DrawCardRequestValidationError{}

// Validate checks the field values on DrawCardResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DrawCardResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DrawCardResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DrawCardResponseMultiError, or nil if none found.
func (m *DrawCardResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DrawCardResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCard()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DrawCardResponseValidationError{
					field:  "Card",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DrawCardResponseValidationError{
					field:  "Card",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCard()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DrawCardResponseValidationError{
				field:  "Card",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DrawCardResponseMultiError(errors)
	}

	return nil
}

// DrawCardResponseMultiError is an error wrapping multiple validation errors
// returned by DrawCardResponse.ValidateAll() if the designated constraints
// aren't met.
type DrawCardResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DrawCardResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DrawCardResponseMultiError) AllErrors() []error { return m }

// DrawCardResponseValidationError is the validation error returned by
// DrawCardResponse.Validate if the designated constraints aren't met.
type DrawCardResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DrawCardResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DrawCardResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DrawCardResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DrawCardResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DrawCardResponseValidationError) ErrorName() string { return "DrawCardResponseValidationError" }

// Error satisfies the builtin error interface
func (e DrawCardResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDrawCardResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DrawCardResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DrawCardResponseValidationError{}

// Validate checks the field values on ListCardRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListCardRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCardRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCardRequestMultiError, or nil if none found.
func (m *ListCardRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCardRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = ListCardRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListCardRequestMultiError(errors)
	}

	return nil
}

func (m *ListCardRequest) _validateUuid(uuid string) error {
	if matched := _card_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ListCardRequestMultiError is an error wrapping multiple validation errors
// returned by ListCardRequest.ValidateAll() if the designated constraints
// aren't met.
type ListCardRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCardRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCardRequestMultiError) AllErrors() []error { return m }

// ListCardRequestValidationError is the validation error returned by
// ListCardRequest.Validate if the designated constraints aren't met.
type ListCardRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCardRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCardRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCardRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCardRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCardRequestValidationError) ErrorName() string { return "ListCardRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListCardRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCardRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCardRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCardRequestValidationError{}

// Validate checks the field values on ListCardResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListCardResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCardResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCardResponseMultiError, or nil if none found.
func (m *ListCardResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCardResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCards() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCardResponseValidationError{
						field:  fmt.Sprintf("Cards[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCardResponseValidationError{
						field:  fmt.Sprintf("Cards[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCardResponseValidationError{
					field:  fmt.Sprintf("Cards[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListCardResponseMultiError(errors)
	}

	return nil
}

// ListCardResponseMultiError is an error wrapping multiple validation errors
// returned by ListCardResponse.ValidateAll() if the designated constraints
// aren't met.
type ListCardResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCardResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCardResponseMultiError) AllErrors() []error { return m }

// ListCardResponseValidationError is the validation error returned by
// ListCardResponse.Validate if the designated constraints aren't met.
type ListCardResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCardResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCardResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCardResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCardResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCardResponseValidationError) ErrorName() string { return "ListCardResponseValidationError" }

// Error satisfies the builtin error interface
func (e ListCardResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCardResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCardResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCardResponseValidationError{}
